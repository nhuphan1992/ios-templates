
platform :ios do
  desc "Match Certificates & Profiles"
  lane :code_signing do
    match_development
    match_adhoc
    match_appstore
  end

  lane :remove_keychain do
    if File.exists?(keychain_path)
      delete_keychain(name: keychain_name)
    end
  end

  def match_development
    match_with_custom_keychain(
      type: "development",
      app_identifier: "#{ENV["BUNDLE_ID_DEBUG"]}",
    )
  end

  def match_adhoc
    match_with_custom_keychain(
      type: "adhoc",
      app_identifier: "#{ENV["BUNDLE_ID_STAGING"]}",
    )
  end

  def match_appstore
    match_with_custom_keychain(
      type: "appstore",
      app_identifier: "#{ENV["BUNDLE_ID"]}",
    )
  end

  def match_with_custom_keychain(type:, app_identifier:)
    create_keychain_if_needed
    match(
      type: type,
      app_identifier: app_identifier,
      keychain_name: keychain_name,
      keychain_password: "#{ENV["KEYCHAIN_PASSWORD"]}",
    )
  end

  def keychain_name
    unless @keychain_name.nil?
      @keychain_name
    end

    name = "#{ENV["KEYCHAIN_NAME"]}"
    if ENV["BRANCH_NAME"]
      suffix = "-" + "#{ENV["BRANCH_NAME"]}".sub("/", "-")
      name.concat(suffix)
    end
    @keychain_name = name.concat(".keychain-db")
  end

  def keychain_path
    path = "~/Library/Keychains/#{keychain_name}"
    File.expand_path(path)
  end

  def create_keychain_if_needed
    unless File.exists?(keychain_path)
      keychain_password = is_jenkins? ? "#{ENV["KEYCHAIN_PASSWORD"]}" : prompt(
        text: "\n\n üîê Creating '#{keychain_name}' keychain ... \n\n üîë Please fill in '#{keychain_name}' keychain's password: ",
        secure_text: true,
      )

      create_keychain(
        name: keychain_name,
        default_keychain: false,
        unlock: true,
        timeout: is_jenkins? ? false : 300,
        password: keychain_password,
      )
    end
  end

  desc "create App ID for all app bundles"
  lane :create_app_ids do |options|
    ## DEBUG
    create_app_on_developer_portal(
      app_identifier: "#{ENV["BUNDLE_ID_DEBUG"]}",
      app_name: "#{ENV["SCHEME_NAME_DEBUG"]}",
      sku: options[:sku],
      team_name: options[:team_name],
    )
    ## STAGING
    create_app_on_developer_portal(
      app_identifier: "#{ENV["BUNDLE_ID_STAGING"]}",
      app_name: "#{ENV["SCHEME_NAME_STAGING"]}",
      sku: options[:sku],
      team_name: options[:team_name],
    )
    ## RELEASE
    create_app_on_developer_portal(
      app_identifier: "#{ENV["BUNDLE_ID"]}",
      app_name: "#{ENV["SCHEME_NAME"]}",
      sku: options[:sku],
      team_name: options[:team_name],
    )
  end

  desc "create App ID for all app bundles."
  private_lane :create_app_on_developer_portal do |options|
    produce(
      username: "#{ENV["DEVELOPER_PORTAL_APPLE_ID"]}",
      app_identifier: options[:app_identifier],
      app_name: options[:app_name].gsub("-", " "),
      language: options[:language] || "English",
      app_version: options[:app_version] || "1.0",
      sku: options[:sku],
      team_name: options[:team_name],
      skip_itc: true,
    )
  end
end
